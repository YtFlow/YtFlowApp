# Universal Windows Platform

# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- next
- next-ci
- main

pool:
  vmImage: 'windows-2022'

variables:
  solution: 'YtFlowApp.sln'
  buildPlatform: 'x64|ARM'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  keyFile: 'YtFlowApp_TemporaryKey.pfx'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  vcpkgGitCommitId: 95252eadd63118201b0d0df0b4360fa613f0de84
  cleanBuild: false

steps:
- checkout: self
  submodules: recursive

- task: NuGetToolInstaller@1

- task: Cache@2
  condition: eq(variables.cleanBuild, 'false')
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/*.vcxproj'
    restoreKeys: |
      nuget | "$(Agent.OS)"
      nuget
    path: $(NUGET_PACKAGES)
  displayName: Cache NuGet packages

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: Cache@2
  condition: eq(variables.cleanBuild, 'false')
  inputs:
    key: 'target | "$(Agent.OS)" | YtFlowCore/rust-toolchain.toml | YtFlowCore/Cargo.lock'
    restoreKeys: |
      target | "$(Agent.OS)" | YtFlowCore/rust-toolchain.toml
      target
    path: YtFlowCore/target
  displayName: Cache YtFlowCore target directory

- task: Cache@2
  condition: eq(variables.cleanBuild, 'false')
  inputs:
    key: 'rustup | "$(Agent.OS)" | YtFlowCore/rust-toolchain.toml'
    path: "$(UserProfile)/.rustup"
  displayName: Cache rustup toolchains

- task: Cache@2
  condition: eq(variables.cleanBuild, 'false')
  inputs:
    key: 'cargo | "$(Agent.OS)" | YtFlowCore/Cargo.lock'
    restoreKeys: |
      cargo | "$(Agent.OS)"
      cargo
    path: "$(UserProfile)/.cargo"
  displayName: Cache Cargo packages

- task: Cache@2
  condition: eq(variables.cleanBuild, 'false')
  inputs:
    key: 'vcpkg | "$(Agent.OS)" | "$(vcpkgGitCommitId)"'
    path: "$(Build.BinariesDirectory)/vcpkg"
  displayName: Cache vcpkg for YtFlowCore

- task: run-vcpkg@0
  name: runVcpkg
  displayName: 'Run vcpkg for YtFlowCore'
  inputs:
    vcpkgArguments: 'openssl:x64-uwp openssl:arm-uwp'
    vcpkgGitCommitId: $(vcpkgGitCommitId)

- task: CmdLine@2
  inputs:
    workingDirectory: YtFlowCore
    script: |
      cargo build -p ytflow-uwp-plugin -Z build-std=std,panic_abort --target x86_64-uwp-windows-msvc --release
      cargo build -p ytflow-uwp-plugin -Z build-std=std,panic_abort --target thumbv7a-uwp-windows-msvc --release
  env:
    X86_64_UWP_WINDOWS_MSVC_OPENSSL_DIR: "$(runVcpkg.RUNVCPKG_VCPKG_ROOT_OUT)\\installed\\x64-uwp"
    THUMBV7A_UWP_WINDOWS_MSVC_OPENSSL_DIR: "$(runVcpkg.RUNVCPKG_VCPKG_ROOT_OUT)\\installed\\arm-uwp"
  displayName: Build YtFlowCore for UWP

- task: DownloadSecureFile@1
  name: secureKeyFile
  inputs:
    secureFile: '$(keyFile)'
    retryCount: '2'

- task: CmdLine@2
  inputs:
    script: '.\vcpkg\bootstrap-vcpkg.bat'
  displayName: Bootstrap vcpkg

- task: VSBuild@1
  displayName: Build App Bundle
  inputs:
    platform: 'x64'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:PackageCertificateKeyFile="$(secureKeyFile.secureFilePath)" /p:PackageCertificateThumbprint="" /p:UapAppxPackageBuildMode=SideloadOnly /p:PlatformToolset=v143 /p:PreferredToolArchitecture=x64'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(build.artifactStagingDirectory)\AppxPackages\'
    artifact: 'AppxPackages'
    publishLocation: 'pipeline'
